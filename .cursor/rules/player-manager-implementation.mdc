---
description:
globs:
alwaysApply: false
---
# Player Manager Implementation

The PlayerManager is a centralized component that manages players across the entire poker system.

## Core Features

1. **Player Registration and Tracking**
   - Creates and manages player identities
   - Maintains player state across sessions
   - Tracks player statistics (wins, losses, biggest pots)

2. **Table Management**
   - Manages player seating at tables
   - Handles player movement between tables
   - Tracks which tables are active and their occupancy

3. **Statistics and Activity Tracking**
   - Records hands played and won
   - Tracks total winnings and losses
   - Maintains player activity timestamps
   - Records notable achievements (biggest pots)

4. **Session Management**
   - Manages player login/logout state
   - Tracks current table and seat
   - Monitors activity timeouts

5. **Money Management**
   - Handles player buy-ins
   - Processes cash-outs
   - Updates stack sizes during gameplay

## Implementation Details

The PlayerManager uses a series of Maps to efficiently store and retrieve player data:

- `players`: Stores Player objects by player ID
- `playerStats`: Tracks statistics for each player 
- `playerSessions`: Maintains current session information
- `tables`: References to all active tables

## Integration with GameEngine

The PlayerManager is designed to be used optionally by the GameEngine:

- GameEngine can be initialized with or without a PlayerManager
- When present, the PlayerManager handles all player-related tracking
- PlayerManager receives updates about hand outcomes to update statistics
- Tables register with the PlayerManager to enable cross-table functionality

## Testing

The PlayerManager has comprehensive tests covering:

- Player registration and retrieval
- Table registration and player seating
- Player statistics tracking
- Session management
- Buy-in and cash-out operations

## Usage

```typescript
// Create a player manager
const playerManager = new PlayerManager();

// Register a table
playerManager.registerTable(table);

// Register a player
const player = playerManager.registerPlayer({
  name: "Player Name",
  initialStack: 1000
});

// Seat player at table
playerManager.seatPlayerAtTable(player.id, table.id, seatIndex);

// Update player statistics after a hand
playerManager.updatePlayerStats(player.id, true, 100, 200);

// Handle player buy-in
playerManager.playerBuyIn(player.id, 500);

// Cash out a player
const cashOutAmount = playerManager.playerCashOut(player.id);
```
