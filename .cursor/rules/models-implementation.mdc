---
description: Read this to get an overview of the data models in the system
globs: 
alwaysApply: false
---
# Models Implementation

The models directory contains the core data structures and business logic for representing the various components of a poker game. Each model is designed to be self-contained with clear responsibilities.

## Card and Deck Models

- [Card.ts](mdc:src/models/Card.ts) - Represents a playing card with suit and rank
  - Properties: suit, rank
  - Methods: getValue, toString, equals
  
- [Deck.ts](mdc:src/models/Deck.ts) - Standard deck of 52 cards
  - Methods: shuffle, draw, drawMultiple, reset
  - Handles card creation and management

## Player Models

- [Player.ts](mdc:src/models/Player.ts) - Represents a player in the game
  - Properties: id, name, stack, hand, position, status, currentBet
  - Methods: placeBet, addWinnings, isActive, hasFolded, isAllIn
  - Manages player state and actions

- [Action.ts](mdc:src/models/Action.ts) - Represents player actions in the game
  - Types: FOLD, CHECK, CALL, BET, RAISE, ALL_IN
  - Properties: player, type, amount, timestamp
  - Records and validates player decisions

## Game State Models

- [Hand.ts](mdc:src/models/Hand.ts) - Collection of cards with evaluation placeholders
  - Methods: addCard, addCards, clear
  - Designed to be evaluated by the HandEvaluator

- [Pot.ts](mdc:src/models/Pot.ts) - Manages chips in play
  - Has PotManager for handling main pot and side pots
  - Methods for adding chips, tracking eligibility, determining winners

- [Table.ts](mdc:src/models/Table.ts) - Game table representation
  - Tracks players, community cards, game state, button position
  - Methods for seating players, adding cards, getting game snapshots

## Design Patterns Used

- Immutability: Most properties are read-only after initialization
- Encapsulation: Private fields with public getters/setters
- Value Objects: Cards represented as immutable value objects
- Entity Objects: Players and Tables with distinct identities
- Service Objects: PotManager provides pot calculation services

## Extension Points

- The Hand model can be extended by the HandEvaluator service
- The Player model can be extended with different strategies
- The Table model is ready for integration with the game state machine

